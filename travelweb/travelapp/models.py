# travelapp/models.py
from __future__ import annotations

from django.core.exceptions import ValidationError
from django.db import models
from django.db.models.functions import Lower
from django.urls import reverse
from django.utils import timezone
from django.utils.text import slugify
from django.contrib.auth import get_user_model
from django.core.validators import FileExtensionValidator
from django.db.models.signals import post_save
from django.dispatch import receiver
from datetime import timedelta
import uuid, hashlib

User = get_user_model()




class Country(models.Model):
    name = models.CharField(
        "–°—Ç—Ä–∞–Ω–∞",
        max_length=80,
        help_text="–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)",
    )
    iso2 = models.CharField(
        "ISO‚Äë–∫–æ–¥ (2 –±—É–∫–≤—ã)",
        max_length=2,
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: UZ, RU, KZ. –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–¥—ë–Ω –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.",
    )

    class Meta:
        verbose_name = "–°—Ç—Ä–∞–Ω–∞"
        verbose_name_plural = "–°—Ç—Ä–∞–Ω—ã"
        ordering = ("name",)
        # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ISO2 –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ + –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        constraints = [models.UniqueConstraint(Lower("iso2"), name="uniq_country_iso2_ci")]
        indexes = [models.Index(Lower("iso2"), name="idx_country_iso2_ci")]

    def clean(self):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º iso2.
        """
        if self.iso2:
            code = self.iso2.strip()
            if len(code) != 2 or not code.isalpha():
                raise ValidationError({"iso2": "ISO‚Äë–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2 –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤."})
            self.iso2 = code.upper()

    def __str__(self) -> str:
        return f"{self.name} ({self.iso2})"

    @property
    def flag_emoji(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥-—ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ISO2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UZ' -> üá∫üáø).
        –•—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ë–î –Ω–µ –Ω—É–∂–Ω–æ.
        """
        try:
            a, b = (self.iso2 or "").upper()
        except ValueError:
            return "üè≥Ô∏è"
        base = 127397  # REGIONAL INDICATOR SYMBOL LETTER A
        return chr(base + ord(a)) + chr(base + ord(b))


def trip_hero_upload_to(instance: "Trip", filename: str) -> str:
    """
    –ü—É—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏: trips/hero/<slug>/<YYYY>/<MM>/<filename>
    """
    slug = instance.slug or "trip"
    y_m = instance.date_start.strftime("%Y/%m") if instance.date_start else "0000/00"
    return f"trips/hero/{slug}/{y_m}/{filename}"

def avatar_upload_to(instance, filename: str) -> str:
    """
    –ü—É—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: avatars/<user_id>/<uuid>_filename
    """
    return f"avatars/{instance.user_id}/{uuid.uuid4().hex}_{filename}"

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    display_name = models.CharField("–ò–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", max_length=150, blank=True)
    avatar = models.ImageField(
        "–ê–≤–∞—Ç–∞—Ä",
        upload_to=avatar_upload_to,
        blank=True,
        null=True,
        validators=[FileExtensionValidator(["jpg", "jpeg", "png", "webp"])],
    )
    is_email_verified = models.BooleanField("E‚Äëmail –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", default=False)

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏"

    def __str__(self) -> str:
        return f"Profile({getattr(self.user, 'email', self.user.username)})"

@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(
            user=instance,
            display_name=(getattr(instance, "first_name", "") or "").strip(),
        )


class RegistrationRequest(models.Model):
    """
    –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞.
    –ü–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–µ—Å—å –Ω–µ –±—É–¥–µ–º ‚Äî –ø–æ–ª–æ–∂–∏–º —Å—ã—Ä–æ–π –ø–∞—Ä–æ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é.
    """
    name = models.CharField("–ò–º—è", max_length=150)
    email = models.EmailField("E‚Äëmail", unique=True)
    code_hash = models.CharField("–•—ç—à –∫–æ–¥–∞", max_length=255)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    expires_at = models.DateTimeField("–ò—Å—Ç–µ–∫–∞–µ—Ç")

    class Meta:
        verbose_name = "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        verbose_name_plural = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        indexes = [
            models.Index(fields=("email",), name="idx_regreq_email"),
            models.Index(fields=("expires_at",), name="idx_regreq_expires"),
        ]

    def __str__(self) -> str:
        return f"{self.email} (–¥–æ {self.expires_at:%Y-%m-%d %H:%M})"

    def is_expired(self) -> bool:
        return timezone.now() > self.expires_at

    @staticmethod
    def make_hash(raw: str) -> str:
        return hashlib.sha256(raw.encode("utf-8")).hexdigest()

    @classmethod
    def create_with_code(cls, name: str, email: str, code_raw: str, lifetime_minutes: int = 15):
        return cls.objects.create(
            name=name,
            email=email.lower().strip(),
            code_hash=cls.make_hash(code_raw),
            expires_at=timezone.now() + timedelta(minutes=lifetime_minutes),
        )



class Trip(models.Model):
    THEME_CHOICES = [
        ("forest", "–õ–µ—Å"),
        ("mountain", "–ì–æ—Ä—ã"),
        ("sea", "–ú–æ—Ä–µ"),
        ("desert", "–ü—É—Å—Ç—ã–Ω—è"),
        ("city", "–ì–æ—Ä–æ–¥"),
    ]

    title_full = models.CharField(
        "–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        max_length=160,
        help_text="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–∞",
    )
    title_short = models.CharField(
        "–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        max_length=80,
        help_text="–î–ª—è —Å–ª–∞–≥–∞ –∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –º–µ—Å—Ç",
    )
    slug = models.SlugField(
        "–°–ª–∞–≥",
        unique=True,
        blank=True,
        help_text="–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏",
    )

    country = models.ForeignKey(
        Country,
        verbose_name="–°—Ç—Ä–∞–Ω–∞",
        on_delete=models.PROTECT,
        related_name="trips",
    )
    theme = models.CharField(
        "–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", max_length=16, choices=THEME_CHOICES, default="forest"
    )

    date_start = models.DateField("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    date_end = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")

    altitude_m = models.PositiveIntegerField(
        "–í—ã—Å–æ—Ç–∞ (–º)",
        default=0,
        help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö",
    )
    cities_count = models.PositiveSmallIntegerField(
        "–ì–æ—Ä–æ–¥–æ–≤",
        default=1,
        help_text="–°–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ—Å–µ—â–∞–µ–º",
    )
    capacity = models.PositiveSmallIntegerField("–ú–µ—Å—Ç –≤—Å–µ–≥–æ", default=20)
    booked = models.PositiveSmallIntegerField("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Å—Ç", default=0)

    price_usd = models.DecimalField(
        "–¶–µ–Ω–∞ (USD)",
        max_digits=10,
        decimal_places=2,
        default=0,
        help_text="–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
    )

    hero_image = models.ImageField("–û–±–ª–æ–∂–∫–∞", upload_to=trip_hero_upload_to)

    about_md = models.TextField("–û —Ç—É—Ä–µ (Markdown)", blank=True)
    important_md = models.TextField("–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å (Markdown)", blank=True)
    payment_md = models.TextField("–û–ø–ª–∞—Ç–∞ (Markdown)", blank=True)

    is_published = models.BooleanField("–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å", default=True)

    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–æ", auto_now=True)



    class Meta:
        verbose_name = "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"
        verbose_name_plural = "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
        ordering = ("-date_start", "title_full")
        indexes = [
            models.Index(fields=("slug",), name="idx_trip_slug"),
            models.Index(fields=("country", "date_start"), name="idx_trip_country_date"),
            models.Index(fields=("is_published",), name="idx_trip_published"),
        ]
        constraints = [
            # –ö–æ–Ω–µ—Ü –Ω–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞
            models.CheckConstraint(
                check=models.Q(date_end__gte=models.F("date_start")),
                name="chk_trip_dates_valid",
            ),
            # –ë—Ä–æ–Ω—å –Ω–µ –±–æ–ª—å—à–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            models.CheckConstraint(
                check=models.Q(booked__lte=models.F("capacity")),
                name="chk_trip_booked_lte_capacity",
            ),
            # –¶–µ–Ω–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
            models.CheckConstraint(
                check=models.Q(price_usd__gte=0), name="chk_trip_price_nonneg"
            ),
        ]

    # --------- –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è/—Å–≤–æ–π—Å—Ç–≤–∞ ----------
    def __str__(self) -> str:
        return self.title_full

    @property
    def seats_left(self) -> int:
        return max(0, int(self.capacity) - int(self.booked))

    @property
    def duration_days(self) -> int:
        if self.date_start and self.date_end:
            return (self.date_end - self.date_start).days + 1
        return 0

    @property
    def date_range_str(self) -> str:
        if self.date_start and self.date_end:
            return f"{self.date_start:%d/%m} ‚Äì {self.date_end:%d/%m}"
        return ""

    def get_absolute_url(self):
        return reverse("trip_detail", kwargs={"slug": self.slug})

    # --------- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ----------
    def clean(self):
        errors = {}
        # –î–∞—Ç—ã
        if self.date_start and self.date_end and self.date_end < self.date_start:
            errors["date_end"] = "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞."

        # –ë–æ–ª—å—à–µ –±—Ä–æ–Ω–∏, —á–µ–º –º–µ—Å—Ç
        if self.capacity is not None and self.booked is not None and self.booked > self.capacity:
            errors["booked"] = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –±–æ–ª—å—à–µ, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å."

        # –¶–µ–Ω–∞
        if self.price_usd is not None and self.price_usd < 0:
            errors["price_usd"] = "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π."

        if errors:
            raise ValidationError(errors)

    def save(self, *args, **kwargs):
        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–≥–∞ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–π)
        if not self.slug:
            base = slugify(self.title_short or self.title_full)[:50] or "trip"
            slug = base
            if type(self).objects.filter(slug=slug).exists():
                slug = f"{base}-{self.date_start:%Y%m%d}" if self.date_start else f"{base}-1"
            self.slug = slug

        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–∏–≤–æ–¥–∏–º booked –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if self.capacity is not None and self.booked is not None and self.booked > self.capacity:
            self.booked = self.capacity

        super().save(*args, **kwargs)
